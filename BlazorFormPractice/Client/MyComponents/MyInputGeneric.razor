@using System.Linq.Expressions
@using System.Diagnostics.CodeAnalysis
@using System.ComponentModel.DataAnnotations
@typeparam TItem
@inherits InputBase<TItem>

<div class=@DivClass>
  <label for="@_id" class="col-form-label col-form-label-sm">@_label</label>
  <input id="@_id" class="form-control form-control-sm @CssClass" @bind="@CurrentValue" @bind:event="@BindEvent" />
  <ValidationMessage For="@ValidationFor" />
</div>

@code {
  [Parameter, EditorRequired] public Expression<Func<TItem>> ValidationFor { get; set; } = default!;
  [Parameter, EditorRequired] public string DivClass { get; set; }
  [Parameter] public string BindEvent { get; set; } = "onchange";
  
  private string _id = string.Empty;
  private string _label = string.Empty;

  protected override void OnInitialized()
  {
    var expression = ValidationFor.Body as MemberExpression;
    var tModel = expression.Expression.Type;
    _id = expression.Member.Name;

    var displayAttr = tModel.GetProperty(_id).GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;
    _label = displayAttr?.GetName();
  }

  protected override bool TryParseValueFromString(string value, [MaybeNullWhen(false)] out TItem result, [NotNullWhen(false)] out string validationErrorMessage)
  {
    result = (TItem)Convert.ChangeType(value, typeof(TItem));
    validationErrorMessage = null;
    return true;
  }
}